const CronJob = require('cron').CronJob;
const cds = require('@sap/cds');
//const { getSubscriptorsInfo } = require('../utils/multitenant')
const moment = require('moment-timezone');
moment.tz.setDefault('America/Bogota');


this.before ('GET',Equipment, req => {
	const { Equipment } = req.data
	console.log ()

  })

  

/*const CronJob = require('cron').CronJob;
const cds = require('@sap/cds');
const { infoGta } = require('../conexionApi')
const moment = require('moment-timezone');
moment.tz.setDefault('America/Bogota');


module.exports = function (scheduleDate, afterJob = null) {
	return new CronJob(
		scheduleDate,
		async () => {
			try {
				let currentDate = moment().format();
				let Equipment = await tx.run(SELECT.from('Equipment').where`InventoryNumber is not null`);
				/*for (let validator of validators) {
					if (currentDate > validator.delegation_end_date) {
						await tx.run(UPDATE`validator`.with({ delegate_to_ID: null, delegation_start_date: null, delegation_end_date: null }).where`ID = ${validator.ID}`);
					} else if (currentDate >= validator.delegation_start_date && currentDate <= validator.delegation_end_date) {
						await tx.run(UPDATE`advance_payment_validation`.set`validator_ID = ${validator.delegate_to_ID}`.where`status = 'PENDIENTE APROBACION JEFE' and validator_ID = ${validator.ID}`);
						await tx.run(UPDATE`travel_expense_validation`.set`validator_ID = ${validator.delegate_to_ID}`.where`status in ${['LEGALIZACION PENDIENTE', 'REPORTANDO LEGALIZACION']} and validator_ID = ${validator.ID}`);
					}
				}/

			} catch (err) {
				console.error(err);
			}
		},
		afterJob,
		true,
		'America/Bogota' 
	);
};*/